#!/bin/bash
#
# Selenium standalone server init script.
#
# For Debian-based distros.
#
### BEGIN INIT INFO
# Provides:          selenium-standalone
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Selenium standalone server
### END INIT INFO

DESC="Selenium standalone server"
USER=<%= node['protractor-selenium-server']['selenium']['user'] %>
JAVA=/usr/bin/java
PID_FILE=/var/run/selenium.pid
JAR_FILE=<%= node['protractor-selenium-server']['selenium']['install-dir'] %>/selenium-server-standalone-<%= node['protractor-selenium-server']['selenium']['version'] %>.jar
LOG_FILE=<%= node['protractor-selenium-server']['selenium']['log-dir'] %>/selenium.log

DAEMON_OPTS="-Xmx500m -Xss1024k -jar $JAR_FILE -log $LOG_FILE"

# These two items can be useful for debugging, but do generate very large
# log files when enabled. Note that you need to have -debug set in order to see
# browser-side logging.
# DAEMON_OPTS="$DAEMON_OPTS -debug -browserSideLog"

# See this Stack Overflow item for a delightful bug in Java that requires the
# strange-looking java.security.egd workaround below:
# http://stackoverflow.com/questions/14058111/selenium-server-doesnt-bind-to-socket-after-being-killed-with-sigterm
DAEMON_OPTS="-Djava.security.egd=file:/dev/./urandom $DAEMON_OPTS"

# The value for DISPLAY must match that used by the running instance of Xvfb.
export DISPLAY=:<%= node['protractor-selenium-server']['xvfb']['display'] %>

# Make sure that the PATH includes the location of the chromedriver binary.
# This is necessary for tests with Chromium to work.
export PATH=$PATH:/usr/local/bin

case "$1" in
    start)
        echo "Starting $DESC."
        start-stop-daemon -c $USER --start --background \
            --pidfile $PID_FILE --make-pidfile --exec $JAVA -- $DAEMON_OPTS
        ;;

    stop)
        echo  "Stopping $DESC."
        start-stop-daemon --stop --pidfile $PID_FILE
        rm -f $PID_FILE
        ;;

    restart)
        $0 stop && sleep 2 && $0 start
        ;;

    status)
        if [ -f $PID_FILE ]; then
            echo "$DESC is running."
            exit 0
        else
            echo "$DESC is not running."
            exit 3
        fi
        ;;

    *)
        echo "Usage: /etc/init.d/selenium-standalone {start|stop|restart}"
        exit 1
    ;;
esac

exit 0
